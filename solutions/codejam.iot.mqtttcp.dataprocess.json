{"properties":{},"icon":"area-chart","description":"Process IoT data","processes":{"mqttconsumer01":{"component":"com.sap.mqtt.consumer","metadata":{"label":"MQTT Consumer","x":12,"y":72,"height":80,"width":120,"config":{"mqttBroker":"tcp://test.mosquitto.org:1883","topic":"sapcodejam/+/iot","numRetryAttempts":"3","retryPeriodInMs":"200"}}},"htmlviewer1":{"component":"com.sap.util.htmlViewer","metadata":{"label":"HTML Viewer","x":365.9999990463257,"y":12,"height":80,"width":120,"ui":"dynpath","config":{}}},"python3operator1":{"component":"com.sap.system.python3Operator","metadata":{"label":"Python3Operator","x":181,"y":72,"height":80,"width":120,"extensible":true,"config":{"script":"import time\nimport locale\nimport json\n#import ast\n\n# Number of max devices\nmax_devices_qty = 100\n\nlocale.setlocale(locale.LC_ALL,\"\")\n\ndef main(payload):\n    last_timestamp = int(round(time.time()))\n    ubody = payload.body.decode(\"utf-8\") # Must be converted to Unicode first\n    \n    #body = ast.literal_eval(ubody) #ast.literal_eval works only with strings, but can be improperly formatted JSON, like a result of str(json_object)\n    \n    body=json.loads(ubody)\n    body['loc_timestmp'] = last_timestamp\n    send_blob(json.dumps([body]))\n    \n    guid = body[\"guid\"]\n    del body[\"guid\"]\n    devices[guid] = body\n    \n    message = \"\"\n    message = generate_html_head(message)\n    message = generate_html_body(message, last_timestamp)\n    send_html(message)\n\n# Generates head of HTML/CSS, including Style parameters\ndef generate_html_head(message):\n    message += '''\n\n<head>\n<style>\nbody {\n    font-family: Verdana, Geneva, sans-serif;\n    background: #b5b5bf;\n}\ntable.dataTable {\n  border: 1px solid #1C6EA4;\n  background-color: #EEEEEE;\n  text-align: center;\n  border-collapse: collapse;\n}\ntable.dataTable td, table.dataTable th {\n  border: 2px solid #AAAAAA;\n  padding: 3px 2px;\n}\ntable.dataTable tbody td {\n  font-size: 15px;\n}\ntable.dataTable thead {\n  background: #1C6EA4;\n  background: -moz-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);\n  background: -webkit-linear-gradient(top, #5592bb 0%, #327cad 66%, #1C6EA4 100%);\n  background: linear-gradient(to bottom, #5592bb 0%, #327cad 66%, #1C6EA4 100%);\n  border-bottom: 2px solid #888888;\n}\ntable.dataTable thead th {\n  font-size: 15px;\n  font-weight: bold;\n  color: #FFFFFF;\n  text-align: center;\n  border-left: 2px solid #D0E4F5;\n}\ntable.dataTable thead th:first-child {\n  border-left: none;\n}\n\ntable.dataTable tfoot td {\n  font-size: 14px;\n}\ntable.dataTable tfoot .links {\n  text-align: right;\n}\ntable.dataTable tfoot .links a{\n  display: inline-block;\n  background: #1C6EA4;\n  color: #FFFFFF;\n  padding: 2px 8px;\n  border-radius: 5px;\n}\n</style>\n</head>\n    '''\n    return message\n\n# Concatenates HTML body to previously generated head.\ndef generate_html_body(message, last_timestamp):\n    # Title, description and table header\n    message += '''\n\n<body>\n<center>\n\n<h2> Prototype IoT Data Viewer </h2>\n<br>\n</center>\n<p style=\"margin-left:15%; margin-right:15%\"> The purpose of this Graph is to serve as a stub for the HTML Viewer operator. \nCombining the HTML Viewer with a Python Operator, it is possible to adapt IoT data for real time display in a simple and flexible manner.\n\n<br><br>\nThe data structure generation is happening in the Python3 Operator, which is messaging a String containing an HTML page to the HTML Viewer \nthrough WebSocket with every update. The HTML Viewer then updates the display as soon as a message is received.\n<br><br>\n</p>\n\n<center>\nLast time stamp: {}\n<br><br>\n\n\n<table class=\"dataTable\" id=\"salesTable\">\n<thead>\n<tr>\n<th style=\"width:400px\"> Device UUID </th>\n<th style=\"width:300px\"> Last timestamp </th>\n<th style=\"width:100px\"> CPU % </th>\n<th style=\"width:100px\"> Mem % </th>\n</tr>\n</thead>\n<tbody>\n    '''.format(time.ctime(round(time.time())))\n\n    # Iterates each store to add them to table\n    for i in devices:\n        message += '''\n<tr>\n<td> {} </td>\n<td> {} </td>\n<td> {} %</td>\n<td> {} %</td> \n</tr>\n    '''.format(\n        i, \n        time.ctime(int(devices[i][\"timestmp\"])),\n        locale.format(\"%.2f\", devices[i][\"cpu_load\"], 1),\n        locale.format(\"%.2f\", devices[i][\"mem_load\"], 1)\n        )\n\n    message += '''\n</tbody>\n</table>\n<br><br>\n</center>\n</body>\n    '''\n    return message\n\n# Sends the String containing HTML page through WebSocket\ndef send_html(message):\n    api.send(\"outhtml\", message)\n\n# Sends the String containing HTML page through WebSocket\ndef send_blob(blb):\n    api.send(\"outblob\", blb)\n\napi.send(\"outhtml\", \"Waiting for data...\")\ndevices = {} #Empty dictionary\n\napi.set_port_callback(\"inmsg\", main)"},"additionalinports":[{"name":"inmsg","type":"message"}],"additionaloutports":[{"name":"outhtml","type":"string"},{"name":"outblob","type":"blob"}]}},"wiretap1":{"component":"com.sap.util.wiretap","metadata":{"label":"Wiretap","x":719.9999980926514,"y":72,"height":80,"width":120,"ui":"dynpath","config":{}}},"formatconverter1":{"component":"com.sap.util.formatConverter","metadata":{"label":"Format Converter","x":365.9999990463257,"y":132,"height":80,"width":120,"config":{"targetFormat":"CSV","fields":"guid,timestmp,cpu_load,mem_load,loc_timestmp"}}},"writefile1":{"component":"com.sap.storage.write","metadata":{"label":"Write File","x":550.9999980926514,"y":72,"height":80,"width":120,"config":{"service":"hdfs","hadoopConnection":{"connectionProperties":{"host":"hdfs","port":9000,"user":"root","protocol":"rpc"},"configurationType":"Manual"},"path":"/tmp/iot/load_<date>.csv"}}}},"groups":[],"connections":[{"metadata":{"points":"305,103 332.99999952316284,103 332.99999952316284,52 360.9999990463257,52"},"src":{"port":"outhtml","process":"python3operator1"},"tgt":{"port":"in1","process":"htmlviewer1"}},{"metadata":{"points":"305,121 332.99999952316284,121 332.99999952316284,172 360.9999990463257,172"},"src":{"port":"outblob","process":"python3operator1"},"tgt":{"port":"input","process":"formatconverter1"}},{"metadata":{"points":"489.9999990463257,172 517.9999985694885,172 517.9999985694885,112 545.9999980926514,112"},"src":{"port":"output","process":"formatconverter1"},"tgt":{"port":"inFile","process":"writefile1"}},{"metadata":{"points":"674.9999980926514,112 714.9999980926514,112"},"src":{"port":"outFilename","process":"writefile1"},"tgt":{"port":"in","process":"wiretap1"}},{"metadata":{"points":"136,112 176,112"},"src":{"port":"outmessage","process":"mqttconsumer01"},"tgt":{"port":"inmsg","process":"python3operator1"}}],"inports":{},"outports":{}}